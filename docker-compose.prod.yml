# Container logging - saves logs of running/stopped (but not removed) containers!
# (includes application logs - see /log/log_config_{environment}.json -
# but also docker events & system information)
# View with: docker logs [-f / --follow] <container_id_or_name>
x-logging:
  &default-logging
  driver: loki
  options:
    loki-url: "http://10.65.2.251:3100/loki/api/v1/push"
    loki-timeout: 5s
    loki-max-backoff: 2m
    loki-relabel-config: |
      - action: replace
        source_labels: [compose_project, compose_service]
        separator: "_"
        target_label: service
      - action: labelmap
        regex: "compose_project"
        replacement: "stack"
      - action: labeldrop
        regex: "filename|container_name|compose_project|compose_service"
    max-size: '20m'
    max-file: '5'

volumes:
  postgres-db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "${DATA_PATH}/postgres-db"
  blast-db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "${DATA_PATH}/blast-db"
  uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "${DATA_PATH}/uploads"
  exports:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "${DATA_PATH}/exports"
  downloads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "${DATA_PATH}/downloads"
  fasta-exports:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "${DATA_PATH}/fasta-exports"

secrets:
  postgres_pass:
    file: .secret.postgres_pass
  postgrest_config:
    file: .secret.postgrest_config
  email_config:
    file: .secret.email_config
  ipt_pass:
    file: .secret.ipt_pass
  auth_pass:
    file: .secret.auth_pass

services:

  postgres:
    restart: always
    image: postgres:14
    container_name: asv-db
    logging: *default-logging
    volumes:
      - ./db/db-data-schema.sql:/docker-entrypoint-initdb.d/01-data-schema.sql
      - ./db/db-api-schema.sql:/docker-entrypoint-initdb.d/02-api-schema.sql
      - ./db/db-roles.sql:/docker-entrypoint-initdb.d/03-roles.sql
      - ./db/restrict_db_access.sh:/docker-entrypoint-initdb.d/04-restrict-db.sh
      - postgres-db:/var/lib/postgresql/data
    env_file:
      - .env
    # Connect ports (HOST:CONTAINER) for IPT and pgAdmin (SSH)
    ports:
      - 5432:5432
    secrets:
      - postgres_pass
      - ipt_pass
      - auth_pass
    environment:
    # This will directly set POSTGRES_PASSWORD during db initialization
    # as explained here: https://hub.docker.com/_/postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_pass
    # ... but these need to be explicitly read - see db-roles.sql
      - POSTGRES_IPT_PASS_FILE=/run/secrets/ipt_pass
      - POSTGRES_AUTH_PASS_FILE=/run/secrets/auth_pass

  postgrest:
    restart: always
    image: bioatlas/molmod-postgrest:${TAG:-latest}
    build:
      context: ./
      dockerfile: docker/postgrest
    container_name: asv-rest
    logging: *default-logging
    env_file:
      - .env
    secrets:
      - postgrest_config
    depends_on:
      - postgres

  blast-worker:
    restart: always
    # Can not have container-name set
    image: bioatlas/molmod-blast:${TAG:-latest}
    init: true
    build:
      context: ./
      dockerfile: docker/blast
    logging: *default-logging
    env_file:
      - .env
    secrets:
      - postgres_pass
    environment:
      - RUN_ENV=production
      - FLASK_DEBUG=0
      - BLAST_USAGE_REPORT=false
    volumes:
      - blast-db:/blastdbs

  asv-main:
    restart: always
    image: bioatlas/molmod:${TAG:-latest}
    build:
      context: ./
      dockerfile: docker/production
    container_name: asv-main
    logging: *default-logging
    volumes:
      - uploads:/app/data-volumes/uploads
      - exports:/app/data-volumes/exports
      - downloads:/app/data-volumes/downloads
      - fasta-exports:/app/data-volumes/fasta-exports
    env_file:
      - .env
    secrets:
      - postgres_pass
      - email_config
    environment:
      - PYTHONPATH=/app/molmod
      - FLASK_DEBUG=0
      - CAS_AFTER_LOGOUT=${CAS_AFTER_LOGOUT}
      - MAINTENANCE_MODE=${MAINTENANCE_MODE:-0}
      - MAINTENANCE_ROUTES=${MAINTENANCE_ROUTES-All}
      - UPLOAD_EMAIL=${UPLOAD_EMAIL}
    ports:
      - 5000:5000
    depends_on:
      - postgrest
